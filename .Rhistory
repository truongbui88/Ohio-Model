PVFB_term_Hybrid = PV_Hybrid_Benefit / surv_DR_current,
n_term_DB_legacy = ifelse(entry_year <= 2001, n_term,
ifelse(entry_year <= YearStart, n_term * db_legacy_ratio_, 0)),
n_term_DB_new = ifelse(entry_year <= YearStart, 0, n_term * db_new_ratio),
n_term_Hybrid_legacy = ifelse(entry_year <= 2001, 0,
ifelse(entry_year <= YearStart, n_term * hybrid_legacy_ratio_, 0)),
n_term_Hybrid_new = ifelse(entry_year <= YearStart, 0, n_term * hybrid_new_ratio)
) %>%
group_by(year) %>%
summarise(AAL_term_DB_legacy_est = sum(PVFB_term_DB * n_term_DB_legacy),
AAL_term_DB_new_est = sum(PVFB_term_DB * n_term_DB_new),
AAL_term_Hybrid_legacy_est = sum(PVFB_term_Hybrid * n_term_Hybrid_legacy),
AAL_term_Hybrid_new_est = sum(PVFB_term_Hybrid * n_term_Hybrid_new)
) %>%
ungroup()
wf_refund_df_final <- wf_data$wf_refund_df %>%
filter(year <= YearStart + ModelPeriod,
n_refund > 0) %>%
mutate(entry_year = year - (age - ea)) %>%
left_join(benefit_data$ben_tab, by = c("ea" = "entry_age", "age" = "RetirementAge", "year" = "RetYear", "term_year", "entry_year" = "EntryYear")) %>%
select(ea, age, year, term_year, entry_year, n_refund, DBEEBalance, Hybrid_EEBalance)
View(wf_refund_df_final)
#Join wf refund table with benefit table to calculate the overall refunds each year
wf_refund_df_final <- wf_data$wf_refund_df %>%
filter(year <= YearStart + ModelPeriod,
n_refund > 0) %>%
mutate(entry_year = year - (age - ea)) %>%
left_join(benefit_data$ben_tab, by = c("ea" = "entry_age", "age" = "RetirementAge", "year" = "RetYear", "term_year", "entry_year" = "EntryYear")) %>%
select(ea, age, year, term_year, entry_year, n_refund, DBEEBalance, Hybrid_EEBalance) %>%
#allocate members to plan designs based on entry year
mutate(n_refund_DB_legacy = ifelse(entry_year <= 2001, n_refund,
ifelse(entry_year <= YearStart, n_refund * db_legacy_ratio_, 0)),
n_refund_DB_new = ifelse(entry_year <= YearStart, 0, n_refund * db_new_ratio),
n_refund_Hybrid_legacy = ifelse(entry_year <= 2001, 0,
ifelse(entry_year <= YearStart, n_refund * hybrid_legacy_ratio_, 0)),
n_refund_Hybrid_new = ifelse(entry_year <= YearStart, 0, n_refund * hybrid_new_ratio)
) %>%
group_by(year) %>%
summarise(refund_DB_legacy_est = sum(DBEEBalance * n_refund_DB_legacy),
refund_DB_new_est = sum(DBEEBalance * n_refund_DB_new),
refund_Hybrid_legacy_est = sum(Hybrid_EEBalance * n_refund_Hybrid_legacy),
refund_Hybrid_new_est = sum(Hybrid_EEBalance * n_refund_Hybrid_new)
) %>%
ungroup()
wf_retire_df_final <- wf_data$wf_retire_df %>%
filter(year <= YearStart + ModelPeriod) %>%
mutate(entry_year = year - (age - ea)) %>%
left_join(benefit_data$ben_tab, by = c("ea" = "entry_age", "entry_year" = "EntryYear", "term_year", "retire_year" = "RetYear"))
View(wf_retire_df_final)
wf_retire_df_final <- wf_data$wf_retire_df %>%
filter(year <= YearStart + ModelPeriod) %>%
mutate(entry_year = year - (age - ea)) %>%
left_join(benefit_data$ben_tab, by = c("ea" = "entry_age", "entry_year" = "EntryYear", "term_year", "retire_year" = "RetYear")) %>%
select(ea, age, year, term_year, retire_year, entry_year, n_retire, DB_Benefit, Hybrid_Benefit, COLA)
wf_retire_df_final <- wf_data$wf_retire_df %>%
filter(year <= YearStart + ModelPeriod) %>%
mutate(entry_year = year - (age - ea)) %>%
left_join(benefit_data$ben_tab, by = c("ea" = "entry_age", "entry_year" = "EntryYear", "term_year", "retire_year" = "RetYear")) %>%
select(ea, age, year, term_year, retire_year, entry_year, n_retire, DB_Benefit, Hybrid_Benefit, COLA) %>%
left_join(benefit_data$ann_factor_tab %>% select(-COLA), by = c("ea" = "entry_age", "entry_year" = "EntryYear", "term_year", "year" = "RetYear")) %>%
select(ea, age, year, term_year, retire_year, entry_year, n_retire, DB_Benefit, Hybrid_Benefit, COLA, AnnuityFactor_DR_DB) %>%
rename(base_DB_benefit = DB_Benefit,
base_Hybrid_benefit = Hybrid_Benefit)
#Join wf retire table with benefit table to calculate the overall retirement benefits each year
wf_retire_df_final <- wf_data$wf_retire_df %>%
filter(year <= YearStart + ModelPeriod) %>%
mutate(entry_year = year - (age - ea)) %>%
left_join(benefit_data$ben_tab, by = c("ea" = "entry_age", "entry_year" = "EntryYear", "term_year", "retire_year" = "RetYear")) %>%
select(ea, age, year, term_year, retire_year, entry_year, n_retire, DB_Benefit, Hybrid_Benefit, COLA) %>%
left_join(benefit_data$ann_factor_tab %>% select(-COLA), by = c("ea" = "entry_age", "entry_year" = "EntryYear", "term_year", "year" = "RetYear")) %>%
select(ea, age, year, term_year, retire_year, entry_year, n_retire, DB_Benefit, Hybrid_Benefit, COLA, AnnuityFactor_DR_DB) %>%
rename(base_DB_benefit = DB_Benefit,
base_Hybrid_benefit = Hybrid_Benefit) %>%
#Adjust the benefit based on COLA and allocate members to plan designs based on entry year
mutate(
DB_benefit_final = base_DB_benefit * (1 + COLA)^(year - retire_year),
Hybrid_benefit_final = base_Hybrid_benefit * (1 + COLA)^(year - retire_year),
n_retire_DB_legacy = ifelse(entry_year <= 2001, n_retire,
ifelse(entry_year <= YearStart, n_retire * db_legacy_ratio_, 0)),
n_retire_DB_new = ifelse(entry_year <= YearStart, 0, n_retire * db_new_ratio),
n_retire_Hybrid_legacy = ifelse(entry_year <= 2001, 0,
ifelse(entry_year <= YearStart, n_retire * hybrid_legacy_ratio_, 0)),
n_retire_Hybrid_new = ifelse(entry_year <= YearStart, 0, n_retire * hybrid_new_ratio),
#We use "AnnuityFactor_DR - 1" below because the PVFB for retirees excludes the first payment (i.e. the first payment has already been delivered when the PVFB is calculated)
PVFB_retire_DB = DB_benefit_final * (AnnuityFactor_DR_DB - 1),
PVFB_retire_Hybrid = Hybrid_benefit_final * (AnnuityFactor_DR_DB - 1)
) %>%
group_by(year) %>%
summarise(retire_ben_DB_legacy_est = sum(DB_benefit_final * n_retire_DB_legacy),
retire_ben_DB_new_est = sum(DB_benefit_final * n_retire_DB_new),
retire_ben_Hybrid_legacy_est = sum(Hybrid_benefit_final * n_retire_Hybrid_legacy),
retire_ben_Hybrid_new_est = sum(Hybrid_benefit_final * n_retire_Hybrid_new),
AAL_retire_DB_legacy_est = sum(PVFB_retire_DB * n_retire_DB_legacy),
AAL_retire_DB_new_est = sum(PVFB_retire_DB * n_retire_DB_new),
AAL_retire_Hybrid_legacy_est = sum(PVFB_retire_Hybrid * n_retire_Hybrid_legacy),
AAL_retire_Hybrid_new_est = sum(PVFB_retire_Hybrid * n_retire_Hybrid_new)
) %>%
ungroup()
#Project benefit payments for current retirees
retire_current_int <- RetireeDistribution %>%
select(age, n_retire_ratio:total_ben_ratio) %>%
mutate(n_retire_current = n_retire_ratio * retiree_pop_current,
total_ben_current = total_ben_ratio * ben_payment_current,
avg_ben_current = total_ben_current / n_retire_current,
Years = YearStart)
wf_retire_current <- benefit_data$ann_factor_retire_tab %>%
filter(Years <= YearStart + ModelPeriod) %>%
left_join(retire_current_int, by = c("Age" = "age", "Years")) %>%
select(base_age:AnnuityFactor_DR_retire, n_retire_current, avg_ben_current, total_ben_current) %>%
group_by(base_age) %>%
mutate(n_retire_current = recur_grow(n_retire_current, -mort_DB),
avg_ben_current = recur_grow2(avg_ben_current, cola),
total_ben_current = n_retire_current * avg_ben_current,
#We use "AnnuityFactor_DR - 1" below because the PVFB for retirees excludes the first payment (i.e. the first payment has already been delivered when the PVFB is calculated)
PVFB_retire_current = avg_ben_current * (AnnuityFactor_DR_retire - 1)
) %>%
filter(!is.na(n_retire_current)) %>%
ungroup()
wf_retire_current_final <- wf_retire_current %>%
group_by(Years) %>%
summarise(retire_ben_current_est = sum(total_ben_current),
AAL_retire_current_est = sum(n_retire_current * PVFB_retire_current)
) %>%
ungroup() %>%
rename(year = Years)
#Project benefit payments for current term vested members
#Note that we use the original "dr_current_" in calculating the benefit payments so that any discount rate adjustment can work
retire_ben_term <- PMT(r = dr_current_, nper = amo_period_term, pv = PVFB_term_current, g = payroll_growth_)
year <- YearStart:(YearStart + ModelPeriod)
amo_years_term <- (YearStart + 1):(YearStart + amo_period_term)
retire_ben_term_est <- double(length = length(year))
retire_ben_term_est[which(year %in% amo_years_term)] <- recur_grow3(retire_ben_term, payroll_growth_, amo_period_term)
wf_term_current <- data.frame(year, retire_ben_term_est) %>%
mutate(AAL_term_current_est = roll_pv(rate = dr_current, g = payroll_growth_, nper = amo_period_term, pmt_vec = retire_ben_term_est))
funding_df <- wf_active_df_final %>%
left_join(wf_term_df_final) %>%
left_join(wf_refund_df_final) %>%
left_join(wf_retire_df_final) %>%
left_join(wf_retire_current_final) %>%
left_join(wf_term_current) %>%
replace(is.na(.), 0)
View(funding_df)
#####Funding model - liability side
funding_df <- wf_active_df_final %>%
left_join(wf_term_df_final) %>%
left_join(wf_refund_df_final) %>%
left_join(wf_retire_df_final) %>%
left_join(wf_retire_current_final) %>%
left_join(wf_term_current) %>%
replace(is.na(.), 0) %>%
mutate(
AAL_legacy_est = AAL_active_DB_legacy_est + AAL_active_Hybrid_legacy_est + AAL_term_DB_legacy_est + AAL_term_Hybrid_legacy_est + AAL_retire_DB_legacy_est + AAL_retire_Hybrid_legacy_est + AAL_retire_current_est + AAL_term_current_est,
AAL_new_est = AAL_active_DB_new_est + AAL_active_Hybrid_new_est + AAL_term_DB_new_est + AAL_term_Hybrid_new_est + AAL_retire_DB_new_est + AAL_retire_Hybrid_new_est,
AAL_est = AAL_legacy_est + AAL_new_est,
tot_ben_refund_legacy_est = refund_DB_legacy_est + refund_Hybrid_legacy_est + retire_ben_DB_legacy_est + retire_ben_Hybrid_legacy_est + retire_ben_current_est + retire_ben_term_est,
tot_ben_refund_new_est = refund_DB_new_est + refund_Hybrid_new_est + retire_ben_DB_new_est + retire_ben_Hybrid_new_est,
tot_ben_refund_est = tot_ben_refund_legacy_est + tot_ben_refund_new_est
)
#Calculate liability gain/loss if any and project AAL using the roll forward method
funding_df$liability_gain_loss_legacy_est <- 0
funding_df$liability_gain_loss_new_est <- 0
funding_df$liability_gain_loss_est <- 0
funding_df$AAL_legacy_roll <- 0
funding_df$AAL_new_roll <- 0
funding_df$AAL_roll <- 0
#####Funding model - liability side
funding_df <- wf_active_df_final %>%
left_join(wf_term_df_final) %>%
left_join(wf_refund_df_final) %>%
left_join(wf_retire_df_final) %>%
left_join(wf_retire_current_final) %>%
left_join(wf_term_current) %>%
replace(is.na(.), 0) %>%
mutate(
AAL_legacy_est = AAL_active_DB_legacy_est + AAL_active_Hybrid_legacy_est + AAL_term_DB_legacy_est + AAL_term_Hybrid_legacy_est + AAL_retire_DB_legacy_est + AAL_retire_Hybrid_legacy_est + AAL_retire_current_est + AAL_term_current_est,
AAL_new_est = AAL_active_DB_new_est + AAL_active_Hybrid_new_est + AAL_term_DB_new_est + AAL_term_Hybrid_new_est + AAL_retire_DB_new_est + AAL_retire_Hybrid_new_est,
AAL_est = AAL_legacy_est + AAL_new_est,
tot_ben_refund_legacy_est = refund_DB_legacy_est + refund_Hybrid_legacy_est + retire_ben_DB_legacy_est + retire_ben_Hybrid_legacy_est + retire_ben_current_est + retire_ben_term_est,
tot_ben_refund_new_est = refund_DB_new_est + refund_Hybrid_new_est + retire_ben_DB_new_est + retire_ben_Hybrid_new_est,
tot_ben_refund_est = tot_ben_refund_legacy_est + tot_ben_refund_new_est
)
#Calculate liability gain/loss if any and project AAL using the roll forward method
funding_df$liability_gain_loss_legacy_est <- 0
funding_df$liability_gain_loss_new_est <- 0
funding_df$liability_gain_loss_est <- 0
funding_df$AAL_legacy_roll <- 0
funding_df$AAL_new_roll <- 0
funding_df$AAL_roll <- 0
for (i in 1:nrow(funding_df)) {
if (i == 1) {
funding_df$liability_gain_loss_legacy_est[i] <- 0
funding_df$liability_gain_loss_new_est[i] <- 0
funding_df$AAL_legacy_roll[i] <- funding_df$AAL_legacy_est[i]
funding_df$AAL_new_roll[i] <- funding_df$AAL_new_est[i]
} else {
funding_df$liability_gain_loss_legacy_est[i] <- round(funding_df$AAL_legacy_est[i] - (funding_df$AAL_legacy_est[i-1] * (1 + dr_current) + funding_df$payroll_DB_legacy_est[i-1] * funding_df$nc_rate_DB_legacy_est[i-1] + funding_df$payroll_Hybrid_legacy_est[i-1] * funding_df$nc_rate_Hybrid_legacy_est[i-1] - funding_df$tot_ben_refund_legacy_est[i]), digits = 1)
funding_df$liability_gain_loss_new_est[i] <- round(funding_df$AAL_new_est[i] - (funding_df$AAL_new_est[i-1] * (1 + dr_new) + funding_df$payroll_DB_new_est[i-1] * funding_df$nc_rate_DB_new_est[i-1] + funding_df$payroll_Hybrid_new_est[i-1] * funding_df$nc_rate_Hybrid_new_est[i-1] - funding_df$tot_ben_refund_new_est[i]), digits = 1)
funding_df$AAL_legacy_roll[i] <- funding_df$AAL_legacy_roll[i-1] * (1 + dr_current) + funding_df$payroll_DB_legacy_est[i-1] * funding_df$nc_rate_DB_legacy_est[i-1] + funding_df$payroll_Hybrid_legacy_est[i-1] * funding_df$nc_rate_Hybrid_legacy_est[i-1] - funding_df$tot_ben_refund_legacy_est[i] + funding_df$liability_gain_loss_legacy_est[i]
funding_df$AAL_new_roll[i] <- funding_df$AAL_new_roll[i-1] * (1 + dr_new) + funding_df$payroll_DB_new_est[i-1] * funding_df$nc_rate_DB_new_est[i-1] + funding_df$payroll_Hybrid_new_est[i-1] * funding_df$nc_rate_Hybrid_new_est[i-1] - funding_df$tot_ben_refund_new_est[i] + funding_df$liability_gain_loss_new_est[i]
}
}
funding_df$liability_gain_loss_est <- funding_df$liability_gain_loss_legacy_est + funding_df$liability_gain_loss_new_est
funding_df$AAL_roll <- funding_df$AAL_legacy_roll + funding_df$AAL_new_roll
View(funding_df)
rm(list = ls())
#Loading required libraries
library("readxl")
library(tidyverse)
library(zoo)
library(profvis)
library(data.table)
library(openxlsx)
#Get actuarial and financial functions
source("utility_functions.R")
#Get model inputs and assumptions
source("Ohio STRS Model Inputs.R")
#Get benefit data and model
source("Ohio STRS Hybrid DB BModel 2022.R")
#Get workforce data (do this periodically only)
source("Ohio Workforce.R")
# get_wf_data()
#Get liability model
wf_data <- readRDS("wf_data.rds")
source("Ohio STRS liability model.R")
source("Ohio STRS liability model.R")
baseline_liab <- get_liability_data()
View(baseline_liab)
write.csv(baseline_liab, "baseline_liab.csv")
rm(list = ls())
#Loading required libraries
library("readxl")
library(tidyverse)
library(zoo)
library(profvis)
library(data.table)
library(openxlsx)
#Get actuarial and financial functions
source("utility_functions.R")
#Get model inputs and assumptions
source("Ohio STRS Model Inputs.R")
#Get benefit data and model
source("Ohio STRS Hybrid DB BModel 2022.R")
#Get workforce data (do this periodically only)
source("Ohio Workforce.R")
YearStart + ModelPeriod
YearStart
get_wf_data()
rm(list = ls())
#Loading required libraries
library("readxl")
library(tidyverse)
library(zoo)
library(profvis)
library(data.table)
library(openxlsx)
#Get actuarial and financial functions
source("utility_functions.R")
#Get model inputs and assumptions
source("Ohio STRS Model Inputs.R")
#Get benefit data and model
source("Ohio STRS Hybrid DB BModel 2022.R")
#Get workforce data (do this periodically only)
source("Ohio Workforce.R")
get_wf_data()
rm(list = ls())
#Loading required libraries
library("readxl")
library(tidyverse)
library(zoo)
library(profvis)
library(data.table)
library(openxlsx)
#Get actuarial and financial functions
source("utility_functions.R")
#Get model inputs and assumptions
source("Ohio STRS Model Inputs.R")
#Get benefit data and model
source("Ohio STRS Hybrid DB BModel 2022.R")
#Get workforce data (do this periodically only)
source("Ohio Workforce.R")
# get_wf_data()
#Get liability model
wf_data <- readRDS("wf_data.rds")
source("Ohio STRS liability model.R")
#Get funding model
source("Ohio STRS funding model.R")
baseline_liab <- get_liability_data()
View(baseline_liab)
#################################################################
##                        Funding Model                        ##
#################################################################
project_period <- ModelPeriod
# start_projection_year <- 2023
end_projection_year <- YearStart + project_period
#Break up the funding_data table into individual vectors
empty_matrix <- matrix(0,(end_projection_year - YearStart), 1)
for(j in 1:length(colnames(funding_data))){
temp_matrix <- rbind(as.matrix(funding_data[,j]), empty_matrix)
assign(as.character(colnames(funding_data)[j]), temp_matrix)
}
dr_current = dr_current_
dr_new = dr_new_
cola_current_active = COLA_current_active
cola_new_active = COLA_new_active
cola_current_retire = COLA_current_retire
cola_current_retire_one = COLA_current_retire_one
one_time_cola = one_time_cola_
retire_refund_ratio = retire_refund_ratio_
cal_factor = cal_factor_
db_new_ratio = db_new_ratio_
return_scen = return_scen_
model_return = model_return_
funding_policy = funding_policy_
amo_period_current = amo_period_current_
amo_period_new = amo_period_new_
amo_pay_growth = amo_pay_growth_
amo_method = amo_method_
liability_df <- get_liability_data(dr_current = dr_current,
dr_new = dr_new,
cola_current_active = cola_current_active,
cola_new_active = cola_new_active,
cola_current_retire = cola_current_retire,
cola_current_retire_one = cola_current_retire_one,
one_time_cola = one_time_cola,
retire_refund_ratio = retire_refund_ratio,
cal_factor = cal_factor,
db_new_ratio = db_new_ratio)
#Break up liability_df into individual vectors
liability_df <- liability_df %>% filter(year %in% YearStart:end_projection_year)
for(j in 1:length(colnames(liability_df))){
temp_matrix <- as.matrix(liability_df[,j])
assign(as.character(colnames(liability_df)[j]), temp_matrix)
}
#Model calibration
#payroll calibration
payroll_DB_legacy_ratio <- lag(payroll_DB_legacy_est / payroll_est)  #use lag to align with the funding mechanism
payroll_DB_new_ratio <- lag(payroll_DB_new_est / payroll_est)
payroll_Hybrid_legacy_ratio <- lag(payroll_Hybrid_legacy_est / payroll_est)
payroll_Hybrid_new_ratio <- lag(payroll_Hybrid_new_est / payroll_est)
#normal cost calibration/projection
nc_rate_DB_legacy[,1] <- lag(nc_rate_DB_legacy_est * nc_cal_DB)
nc_rate_DB_new[,1] <- lag(nc_rate_DB_new_est * nc_cal_DB)
nc_rate_Hybrid_legacy[,1] <- lag(nc_rate_Hybrid_legacy_est * nc_cal_Hybrid)
nc_rate_Hybrid_new[,1] <- lag(nc_rate_Hybrid_new_est * nc_cal_Hybrid)
#accrued liability calibration
AAL_legacy[1,1] <- AAL_legacy_est[1,1]
AAL[1,1] <- AAL_est[1,1]
UAL_AVA_legacy[1,1] <- AAL_legacy[1,1] - AVA_legacy[1,1]
UAL_AVA[1,1] <- AAL[1,1] - AVA[1,1]
#Set up amo period sequences
amo_period_seq_current <- seq(amo_period_current, 1)
amo_period_seq_new <- seq(amo_period_new, 1)
n <- max(length(amo_period_seq_current), length(amo_period_seq_new))
length(amo_period_seq_current) <- n
length(amo_period_seq_new) <- n
#Amo period table for current hires
amo_period_table_current <- rbind(amo_period_seq_current, matrix(amo_period_seq_new,
nrow = project_period,
ncol = length(amo_period_seq_current),
byrow = T))
rownames(amo_period_table_current) <- NULL         #Remove row names
#Put the amo periods on diagonal rows
for (i in 1:ncol(amo_period_table_current)) {
amo_period_table_current[,i] <- lag(amo_period_table_current[,i], n = i - 1)
}
#Turn all NAs in the table to 0s
amo_period_table_current[is.na(amo_period_table_current)] <- 0
#Amo period table for future hires
amo_period_table_new <- matrix(amo_period_seq_new,
nrow = project_period + 1,
ncol = length(amo_period_seq_new),
byrow = T)
#Put the amo periods on diagonal rows
for (i in 1:ncol(amo_period_table_new)) {
amo_period_table_new[,i] <- lag(amo_period_table_new[,i], n = i)
}
#Turn all NAs in the table to 0s
amo_period_table_new[is.na(amo_period_table_new)] <- 0
#Level % or level $ for debt amortization
if(amo_method == "level $"){
amo_pay_growth <- 0
}
#Set up the UAAL layer and amo payment tables for current members and initialize the first UAAL layer and amo payment
debt_layer_table_current <- matrix(0, nrow = project_period + 1, ncol = length(amo_period_seq_current) + 1)
amo_payment_table_current <- matrix(0, nrow = project_period + 1, ncol = length(amo_period_seq_current))
debt_layer_table_current[1,1] <- UAL_AVA[1]
amo_payment_table_current[1,1] <- PMT(pv = debt_layer_table_current[1,1],
r = dr_current,
g = amo_pay_growth,
nper = amo_period_table_current[1,1],
t = 0.5)
#Set up the UAAL layer and amo payment tables for new members
debt_layer_table_new <- matrix(0, nrow = project_period + 1, ncol = length(amo_period_seq_new) + 1)
amo_payment_table_new <- matrix(0, nrow = project_period + 1, ncol = length(amo_period_seq_new))
#Set return values for "model" and "assumption" scenarios
return_scenarios$model <- model_return
return_scenarios$assumption <- dr_current
#Return scenario
# return_scen <- "recur_recession"
return_scen_index <- which(colnames(return_scenarios) == return_scen)
ee_nc_rate_DB_legacy
er_cont_rate_stat <- 0.14
er_cont_rate_stat
er_nc_rate_legacy
er_stat_rate
er_stat_rate
rm(list = ls())
#Loading required libraries
library("readxl")
library(tidyverse)
library(zoo)
library(profvis)
library(data.table)
library(openxlsx)
#Get actuarial and financial functions
source("utility_functions.R")
#Get model inputs and assumptions
source("Ohio STRS Model Inputs.R")
#Get benefit data and model
source("Ohio STRS Hybrid DB BModel 2022.R")
#Get workforce data (do this periodically only)
source("Ohio Workforce.R")
# get_wf_data()
#Get liability model
wf_data <- readRDS("wf_data.rds")
source("Ohio STRS liability model.R")
#Get funding model
source("Ohio STRS funding model.R")
ee_nc_rate_DB_new
ee_cont_rate_DB
inf_rate <- 0.025
YearStart
cum_er_cont_real
rm(list = ls())
#Loading required libraries
library("readxl")
library(tidyverse)
library(zoo)
library(profvis)
library(data.table)
library(openxlsx)
#Get actuarial and financial functions
source("utility_functions.R")
#Get model inputs and assumptions
source("Ohio STRS Model Inputs.R")
#Get benefit data and model
source("Ohio STRS Hybrid DB BModel 2022.R")
#Get workforce data (do this periodically only)
source("Ohio Workforce.R")
# get_wf_data()
#Get liability model
wf_data <- readRDS("wf_data.rds")
source("Ohio STRS liability model.R")
#Get funding model
source("Ohio STRS funding model.R")
baseline_funding <- get_funding_data()
View(baseline_funding)
write.csv(baseline_funding, "baseline_funding.csv")
ben_cal <- 0.9
ben_cal
ben_cal
#Get funding model
source("Ohio STRS funding model.R")
baseline_funding <- get_funding_data()
View(baseline_funding)
write_csv(baseline_funding, "baseline_funding.csv")
baseline_funding <- baseline_funding %>% mutate(total_ben = sum(ben_payment_legacy + ben_payment_new + refund_legacy + refund_new))
plot(baseline_funding$total_ben)
baseline_funding <- baseline_funding %>% mutate(total_ben = ben_payment_legacy + ben_payment_new + refund_legacy + refund_new)
plot(baseline_funding$total_ben)
ben_cal <- 0.95
baseline_funding <- get_funding_data()
baseline_funding$AAL[baseline_funding$fy == 2042]
ben_cal <- 0.97
baseline_funding <- get_funding_data()
baseline_funding$AAL[baseline_funding$fy == 2042]
baseline_funding <- baseline_funding %>% mutate(total_ben = ben_payment_legacy + ben_payment_new + refund_legacy + refund_new)
plot(baseline_funding$total_ben)
plot(baseline_funding$total_ben)
plot(baseline_funding$total_ben)
write_csv(baseline_funding, "baseline_funding.csv")
reduceDR <- get_funding_data(dr_current = 0.06, dr_new = 0.06)
View(reduceDR)
baseline_liab <- get_liability_data()
reduceDR_liab <- get_liability_data(dr_current = 0.06, dr_new = 0.06)
View(baseline_liab)
View(reduceDR_liab)
View(reduceDR)
View(baseline_funding)
MVA_baseline <- baseline_funding$MVA
MVA_reduceDR <- reduceDR$MVA
data.frame(MVA_baseline, MVA_reduceDR)
test <- data.frame(MVA_baseline, MVA_reduceDR)
plot(test)
write.csv(test, "test.csv")
View(reduceDR_liab)
View(baseline_liab)
test2 <- data.frame(baseline_liab$tot_ben_refund_est, reduceDR_liab$tot_ben_refund_est)
View(test2)
write.csv(test2, "test2.csv")
View(reduceDR)
baseline_funding <- baseline_funding %>% mutate(outflow = ben_payment_legacy + ben_payment_new + refund_legacy + refund_new)
reduceDR <- reduceDR %>% mutate(outflow = ben_payment_legacy + ben_payment_new + refund_legacy + refund_new)
View(baseline_funding)
baseline_ADC <- get_funding_data(funding_policy = "ADC")
View(baseline_ADC)
amo_period_current_
View(return_scenarios)
recur_recess <- get_funding_data(return_scen = "recur_recession")
View(recur_recess)
recur_recess <- get_funding_data(return_scen = "model", model_return = 0)
View(recur_recess)
